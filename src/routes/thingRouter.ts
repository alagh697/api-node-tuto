import express, {NextFunction, Request, Response} from 'express'
import Thing from '../types/thing'
import * as thingModel from '../models/thing'
import { error } from 'console'
import multer from 'multer'

const thingRouter = express.Router()

export default thingRouter

// Set up the storage for multer
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'src/uploads/');
    },
    filename: function (req, file, cb) {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      cb(null, uniqueSuffix + '-' + file.originalname);
    }
  });
  
  const upload = multer({ storage: storage });

  thingRouter.post('/', upload.single('image'), async (req: Request, res: Response, next: NextFunction) => {
    try {
      const newThingName: string = req.body.name;
      const newThingImageUrl: string = req.file ? req.file.filename: '' // Use the filename generated by multer
      thingModel.createThing(newThingName, newThingImageUrl, (error: Error, thingId: number) => {
        if (error) {
          return next(error);
        }
  
        return res.status(201).json({ thingId });
      });
    } catch (error) {
      // Handle any uncaught error here
      return next(error);
    }
  })

  thingRouter.put('/:id/removeImage', async (req: Request, res: Response, next: NextFunction) => {
    try {
      console.log(req.body)
      const thingId: number = Number(req.params.id)
      const thingImageUrl: string = req.body.image_url
      thingModel.updateRemoveThingPhoto(thingId, thingImageUrl, (error: Error, thingId: number) => {
        if (error) {
          return next(error);
        }
  
        return res.status(200).json({ thingId });
      });
    } catch (error) {
      // Handle any uncaught error here
      return next(error);
    }
  })
  

thingRouter.get('/', async (req: Request, res: Response) => {
    thingModel.findAllThings((error: Error, things: Thing[]) => {
        if (error) {
            return res.status(500).json({errorMessage: error.message})
        }

        return res.status(200).json(things)
    })
})



thingRouter.get('/:id', async (req: Request, res: Response, next: NextFunction) => {
  try {  
  const thingId: number = Number(req.params.id)
    thingModel.findOneThing(thingId, (error: Error, thing: Thing) => {
        if (error) {
          return next(error);
        }

        return res.status(200).json(thing)
    })
  } catch (error) {
    // Handle any uncaught error here
    return next(error);
  }
})

thingRouter.put('/:id', async (req: Request, res: Response) => {
    const thing: Thing = req.body
    thingModel.updateThing(thing, (error: Error) => {
        if (error) {
            return res.status(500).json({errorMessage: error.message})
        }

        return res.status(200).send()
    })
})

thingRouter.delete('/:id', async (req: Request, res: Response) => {
    const thingId: number = Number(req.params.id)
    thingModel.deleteThing(thingId, (error: Error) => {
        if (error) {
            return res.status(500).json({errorMessage: error.message})
        }

        return res.status(200).send()
    })
})

